using System.Text.RegularExpressions;
using System.Threading.Tasks;
using Microsoft.Playwright;
using Microsoft.Playwright.NUnit;
using NUnit.Framework;


namespace PlaywrightTest;

[Parallelizable(ParallelScope.Self)]
[TestFixture]
public class Tests : PageTest
{ 
    [Test]
    public async Task RegisterPostCheepFollowUnfollowDeleteCheepLogout()
    {
        //Create random username (generated by CoPilot)
        Random Random = new Random();
        const string chars = "abcdefghijklmnopqrstuvwxyz0123456789";
        string RandomString = new string(Enumerable.Repeat(chars, 7)
            .Select(s => s[Random.Next(s.Length)]).ToArray());
        string UserName = RandomString;

        await Page.GotoAsync("http://localhost:5000/");

        //Register user
        await Page.GetByRole(AriaRole.Link, new() { Name = "Register" }).ClickAsync();
        await Page.GetByPlaceholder("name@example.com").ClickAsync();
        await Page.GetByPlaceholder("name@example.com").FillAsync(UserName + "@Example.com");
        await Page.GetByPlaceholder("name@example.com").PressAsync("Tab");
        await Page.GetByLabel("Password", new() { Exact = true }).FillAsync("Test!123");
        await Page.GetByLabel("Confirm Password").ClickAsync();
        await Page.GetByLabel("Confirm Password").FillAsync("Test!123");
        await Page.GetByRole(AriaRole.Button, new() { Name = "Register" }).ClickAsync();
        await Page.GetByRole(AriaRole.Link, new() { Name = "Click here to confirm your" }).ClickAsync();

        //Login user
        await Page.GetByRole(AriaRole.Link, new() { Name = "Login" }).ClickAsync();
        await Page.GetByPlaceholder("name@example.com").ClickAsync();
        await Page.GetByPlaceholder("name@example.com").FillAsync(UserName + "@Example.com");
        await Page.GetByPlaceholder("password").ClickAsync();
        await Page.GetByPlaceholder("password").FillAsync("Test!123");
        await Page.GetByRole(AriaRole.Button, new() { Name = "Log in" }).ClickAsync();

        //Post cheep
        await Page.Locator("#CheepDTO_Text").ClickAsync();
        await Page.Locator("#CheepDTO_Text").FillAsync("This is my first cheep!");
        await Page.GetByRole(AriaRole.Button, new() { Name = "Share" }).ClickAsync();

        //EXPECT cheep is posted
        await Expect(Page.GetByText(UserName + "@Example.com Delete Cheep"))
            .ToContainTextAsync("This is my first cheep!");

        //Follow Quintin Sitts
        await Page.Locator("li").Filter(new() { HasText = "Quintin Sitts Follow It''s" })
            .GetByRole(AriaRole.Button).ClickAsync();

        //Go to private timeline
        await Page.GetByRole(AriaRole.Link, new() { Name = "my timeline" }).ClickAsync();

        //Go to public timeline
        await Page.GetByRole(AriaRole.Link, new() { Name = "public timeline" }).ClickAsync();

        //EXPECT button on Quintin Sitts' cheep now says 'unfollow'
        await Expect(Page.Locator("li").Filter(new() { HasText = "Quintin Sitts Unfollow It''s" })
            .GetByRole(AriaRole.Button)).ToContainTextAsync("Unfollow");

        //Go to Qunitin Sitts' timeline
        var cheep = Page.Locator("li").Filter(new() { HasText = "Quintin Sitts Unfollow It''s" });
        await cheep.GetByRole(AriaRole.Link, new() { Name = "Quintin Sitts" }).ClickAsync();
       
        //EXPECT URL matches the author's usertimeline
        await Expect(Page).ToHaveURLAsync("http://localhost:5000/Author/Quintin%20Sitts");

        //Unfollow Quintin Sitts
        await Page.Locator("li").Filter(new() { HasText = "Quintin Sitts Unfollow It''s" })
            .GetByRole(AriaRole.Button).ClickAsync();
        
        //Go to private timeline to delete posted cheep
        await Page.GetByRole(AriaRole.Link, new() { Name = "my timeline" }).ClickAsync();
        await Page.GetByRole(AriaRole.Button, new() { Name = "Delete Cheep" }).ClickAsync();

        //Go to about me page
        await Page.GetByRole(AriaRole.Link, new() { Name = "about me" }).ClickAsync();

        //EXPECT user's email is displayed
        await Expect(Page.GetByText("About me Username/E-mail:"))
            .ToContainTextAsync(UserName + "@Example.com");

        //Logout user
        await Page.GetByRole(AriaRole.Link, new() { Name = "logout" }).ClickAsync();
        await Page.Locator("div").Filter(new() { HasText = "Click here to Logout" }).Nth(1).ClickAsync();

    }
}
